Test your Knowledge
1. What type would you choose for the following “numbers”?
A person’s telephone number: String
Telephone numbers often contain special characters like + or - and might start with 0. 
A person’s height: float or double
A person’s age: int
A person’s gender (Male, Female, Prefer Not To Answer): Enum
A person’s salary: decimal
A book’s ISBN: String
A book’s price: decimal
A book’s shipping weight: float or double
A country’s population: ulong (no negative huge population possibility)
The number of stars in the universe: ulong (no negative and large value)
The number of employees in each of the small or medium businesses in the
United Kingdom (up to about 50,000 employees per business): int

2. What are the difference between value type and reference type variables? What is
boxing and unboxing?

Value types: These store data directly. 
They are stored on the stack, and each variable has its own copy of the data. 
Common value types include int, bool, float, struct, and enum.
Reference types: These store a reference to the actual data. 
The reference is stored on the stack, but the actual data is stored in the heap. 
Reference types include class, array, delegate, and string. 

Boxing: This is the process of converting a value type into an object (reference type). 
It involves wrapping the value type inside a reference type (object).
Unboxing: This is the process of converting an object (reference type) back to its original value type.                                                                               

3. What is meant by the terms managed resource and unmanaged resource in .NET
Managed resources: These are resources that are handled by the .NET runtime (CLR). 
The garbage collector automatically manages the memory allocation and deallocation for these resources. 
Examples include objects created from managed code, like instances of classes.

Unmanaged resources: These are resources not managed by the .NET runtime and usually involve resources outside the CLR, 
such as file handles, database connections, and network sockets. Since the garbage collector doesn’t handle these, you must release them manually, 
usually by implementing IDisposable and calling Dispose().

4. Whats the purpose of Garbage Collector in .NET?
The Garbage Collector (GC) in .NET is responsible for automatic memory management. 
Its main purpose is to free up memory that is no longer being used by the program, preventing memory leaks and optimizing application performance.

==================================================================================
When you divide an int variable by 0:
An exception of type System.DivideByZeroException is thrown at runtime.

When you divide a double variable by 0:
The result is positive infinity, negative infinity, or NaN (Not a Number), depending on the dividend's sign. No exception is thrown.
When you overflow an int variable:

By default, it wraps around without throwing an exception. For example, if you add 1 to int.MaxValue, you get int.MinValue.
Difference between x = y++; and x = ++y;:


x = y++; (postfix): y is incremented after its value is assigned to x.
x = ++y; (prefix): y is incremented before its value is assigned to x.


Difference between break, continue, and return in a loop:

break: Exits the loop immediately.
continue: Skips the rest of the current iteration and moves to the next iteration.
return: Exits the entire method, not just the loop.


Three parts of a for statement:

Initializer
Condition
Iterator
None of these parts are strictly required; you can have an empty for statement like: for (;;) { }


Difference between = and ==:


= is the assignment operator, used to assign a value to a variable.
== is the equality comparison operator, used to check if two values are equal.


Does for ( ; true; ) ; compile?
Yes, this statement compiles. It's an infinite loop with an empty body.

The underscore _ in a switch expression:
It represents the default case, matching any value that hasn't been explicitly handled.

Interface required for foreach enumeration:
An object must implement the IEnumerable or IEnumerable<T> interface to be used in a foreach statement.

============================================
static void Test()
        {
            int max = 500;
            for (byte i = 0; i < max; i++)
            {
                WriteLine(i);
            }
            Create a console application and enter the preceding code. Run the console application
            and view the output. What happens?  
            ANS: The for loop will never end and lead to overflow since byte has a maximum of 255. 
            
                What code could you add (don’t change any of the preceding code) to warn us about the
            problem?
            ANS: add an if statement to warn us about overflow and break the for loop
            if (i == 255)
                     {
                         WriteLine("Warning: i is about to overflow!");
                         break;
                     }
                Your program can create a random number between 1 and 3 with the following code:
            int correctNumber = new Random().Next(3) + 1;
            Write a program that generates a random number between 1 and 3 and asks the user to
                guess what the number is. Tell the user if they guess low, high, or get the correct answer.
                Also, tell the user if their answer is outside of the range of numbers that are valid guesses
                (less than 1 or more than 3). You can convert the user's typed answer from a string to an
            int using this code:

        }